{"version":3,"file":"static/js/417.e3d9620b.chunk.js","mappings":"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","sources":["API/API_KEY.js","components/Error/Error.jsx","components/Placeholder/Placeholder.styled.js","components/Placeholder/Placeholder.jsx","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.styled.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'dbdaf7f3b1704351fa5cae8bb683f93c';\n\nexport async function getMovieTrends(currentPage) {\n  try {\n\n    const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}&page=${currentPage}`);\n\n    return data.results;\n\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getMovieByQuery (query) {\n  try {\n    const {data} = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n\n    return data.results;\n  } catch (error) {\n\n    return Notiflix.Notify.failure(\n      `${error.message}, plese contact the administrator`\n    )\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data } = await axios.get(\n      `movie/${id}/credits?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getReviewsById (id) {\n\n    try {\n\n        const {data} = await axios.get(\n            `movie/${id}/reviews?api_key=${API_KEY}`\n        )\n\n        return data;\n    } catch(error) {\n        return Notiflix.Notify.failure(\n            `${error.message}, please contact the administrator`\n          );\n    }\n}\n","const Error = () => {\n  <strong>Something went wrong, please contact the administrator</strong>;\n};\n\nexport default Error;\n","import styled from \"@emotion/styled\"\n\nexport const Wrapper = styled.div`\n\nwidth:200px;\nheight: 300px;\nbackground-color: #fff;\nfont-style: italic;\ndisplay:flex;\njustify-content:center;\nalign-items:center;\ncolor: grey;\n`;\n","import { Wrapper } from './Placeholder.styled';\n\nconst Placeholder = ({title}) => {\n  return (\n    <Wrapper>\n      {title} will be added soon...\n    </Wrapper>\n  )\n}\n\nexport default Placeholder;\n","import styled from \"@emotion/styled\"\nimport colors from '../../utilites/colors';\nexport const Container = styled.div`\ndisplay: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  background-color: ${colors.backgroundDark};\n  color: ${colors.textLight};\n  width: 300px;\n  margin: 0 auto;\n  text-align: center;\n\n`;\n\n\nexport const Poster = styled.img`\n\nwidth: 100%;\n  max-width: 300px;\n  height: auto;\n  border-radius: 10px;\n`;\n\nexport const Title = styled.h1`\n\nfont-size: 24px;\n  margin: 10px 0;\ncolor: ${colors.textLight};\n\n`;\n\n\nexport const FirstParagraph = styled.p`\nmargin: 10px 0;\ncolor: ${colors.textLight};\n`;\n\nexport const SecondParagraph = styled.p`\n\nfont-weight: bold;\n  color: ${colors.textLight};\n  margin-top: 10px;\n\n`;\n\nexport const FirstSubTitle = styled.h2`\n\ncolor: ${colors.accentRed};\n`;\n\nexport const SecondSubTitle = styled.h2`\n\ncolor: ${colors.accentRed};\n`;\n","import { Container, Poster, Title, FirstParagraph, SecondParagraph, FirstSubTitle, SecondSubTitle } from './MovieCard.styled';\nimport Placeholder from 'components/Placeholder/Placeholder';\n\nconst MovieCard = ({posterPath, title, vote_average, overview, genreNames}) => {\n  return (\n    <Container>\n      {posterPath ? <Poster src={`https://image.tmdb.org/t/p/w300${posterPath}`} alt={title} width=\"300\" /> :\n        <Placeholder title={`${title} poster`} />}\n      <Title>{title}</Title>\n      <p>{vote_average}</p>\n      <FirstSubTitle>Overview</FirstSubTitle>\n      <FirstParagraph>{overview}</FirstParagraph>\n      <SecondSubTitle>Genres</SecondSubTitle>\n      <SecondParagraph>{ genreNames}</SecondParagraph>\n    </Container>\n  )\n}\n\nexport default MovieCard;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h3`\n  text-align: center;\n  padding: 10px;\n  margin-bottom: 15px;\n  font-size: 24px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 15px;\n`;\n\nexport const Item = styled.li`\n  font-size: 20px;\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { getMovieById } from 'API/API_KEY';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport Loader from 'components/Loader/Loader';\nimport Error from 'components/Error/Error';\nimport { Notify } from 'notiflix';\nimport { NavLink, useParams, Outlet, useLocation, Link } from 'react-router-dom';\nimport { Title, List, Item } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [loader, setLoader] = useState(false);\n  const [failure, setFailure] = useState(false);\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n\n    const fetchMovie = async () => {\n      try {\n        setLoader(true);\n        const movieData = await getMovieById(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        setFailure(true);\n        Notify.failure(error.message);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchMovie();\n\n  }, [movieId]);\n\n  const { title, vote_average, overview, genres, poster_path } = movie;\n  const genreNames = genres ? genres.map(genre => genre.name).join('') : '';\n  const posterPath = poster_path ? poster_path : '';\n\n  return (\n    <>\n      <Link to={backLinkHref.current}>Back to movies</Link>\n      <MovieCard\n        posterPath={posterPath}\n        title={title}\n        vote_average={vote_average}\n        overview={overview}\n        genreNames={genreNames}\n      />\n      {loader && <Loader />}\n      {failure && <Error />}\n      <Title>Additional informations</Title>\n      <List>\n        <Item>\n          <NavLink to={`cast`}>Cast</NavLink>\n        </Item>\n        <Item>\n          <NavLink to={`reviews`}>Reviews</NavLink>\n        </Item>\n      </List>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n\n"],"names":["axios","API_KEY","getMovieTrends","currentPage","data","results","Notiflix","message","getMovieByQuery","query","getMovieById","id","getCastById","getReviewsById","Wrapper","styled","title","Container","colors","Poster","Title","FirstParagraph","SecondParagraph","FirstSubTitle","SecondSubTitle","posterPath","vote_average","overview","genreNames","src","alt","width","Placeholder","List","Item","location","useLocation","movieId","useParams","useState","movie","setMovie","loader","setLoader","failure","setFailure","backLinkHref","useRef","state","from","useEffect","fetchMovie","movieData","Notify","genres","poster_path","map","genre","name","join","to","current","Loader","Error"],"sourceRoot":""}